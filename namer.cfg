[namer]

# token to access porndb.
# sign up here: https://metadataapi.net/register
porndb_token = ****************************************

# How to write output file name.  When namer.py is run this is applied in place 
# (next to the file to be processed).
# When run from namer_watchdog.py this will be written in to the successdir.
#
# Supports stand python 3 formating, as well as: 
# * a prefix:
# {site: 1p} - in this case put one space in front of the 'site', so ' Vixen'
# * a suffix:
# {date:_1s} - in this case put one underscore after the 'date', so '2020-01-01_'
# * an infix:
# {date:_2i} - in this case put two underscore before and after the 'date', so '__2020-01-01__'
#
# Examples: 
# * {site} - {date} - {scene}.{ext}
# * {site}/{date}.{scene}.{ext}
#
# Missing values will be ignored.
#
# Allowed replacements:
#
# * 'date' - in the format of YYYY-MM-DD.
# * 'description' - too long, don't use in a name.
# * 'name' - the scene name
# * 'site' - the site name, BrazzersExxtra, AllHerLuv, Deeper, etc with spaces removed.
# * 'full_site' - the site name from porndb, unmodified, i.e: Brazzers Exxtra, All Her Luv, etc.
# * 'performers' - space seperated list of female performers
# * 'all_performers' - space seperated list of all performers
# * 'act' - an act, parsed from original file name, don't use.
# * 'ext' - original file's extension, you should keep this.
# * 'trans' - 'TS', or 'ts' if detected in original file name.
#
# This must not contain paths, as files will be processed in place when called on the command line from namer.  
inplace_name={site} - {date} - {name}.{ext}

# If a directory name is to be prefered over a file name.
# Directories are calculated by taking the first part of a relative path
# to the watch_dir location, or as input to namer via -d parameter.
prefer_dir_name_if_available = True

# minimum file size to process in MB, ignored if a file is to be processed
min_file_size = 300

# Settings for new/moved files/dirs.
set_dir_permissions = 775
set_file_permissions = 664

[metadata]
# Currently metadata pulled from the porndb can be added to mp4 files.
# This metadata will be read in fully by Plex, and Apple TV app, partially by Jellyfin (no artist support).
# Metadata includes, Title, Release Date, Scene Name, Artist, Source URL, XXX Movie rating.
# If a file is an mkv adding metadata at this time isn't supported.

# Should metadata fetched from the porn db be written in to the metadata of the mp4.
# No flags in this section will be used if this is not set to true.
enabled_tagging = True

# Should the poster fetched from the porn db be written in to the metadata of the mp4.
# This poster will be displayed in Plex, Jellyfin and Apple TV app.
# Only applicable if enabled_tagging is True
enabled_poster = True

# Should genres pulled from the porndb be added to the file?   These genres are noisey and
# not recommend for use.  If this is false a single default genere will be used.
# These are called Tags on the porndb json response objects, genre's in plex/jellyfin.
# currently not supported, due to inconsistent api endpoints.
enable_metadataapi_genres = False

# If genre's are not copied this is the default genere added to files.
# Default value is adult.
default_genre = Adult

# if language is set it will be used to select the default audio stream in an mp4 that has too many default stream
# to play correct in quicktime/apple tv.   If the language isn't found or is already the only default no action is
# taken, no streams (audio/video) are re-encoded.  See: https://iso639-3.sil.org/code_tables/639/data/
language = eng

[watchdog]

# when processing a directory should other files be removed.
# to keep other files this must be false and new_relative_path_name must contain a directory split, "/"
del_other_files = False

# Configured like inplace_name above, but with paths, and is relative to
# dest_dir, which is where completed files will be moved to. 
new_relative_path_name={site} - {date} - {name}/{site} - {date} - {name}.{ext}

# director where new downloads go.
watch_dir = ./test/watch

# temporary directory where work is done.
# a log file shows attempted matchs and match closeness.
work_dir = ./test/work

# Should processing fail the file or directory is moved here.
# retries occur every 12 hours.   Files can be manually moved to watchdir
# to force reprocessing.
failed_dir = ./test/failed

# dir where finalized files get written.
dest_dir =./test/dest

# When to retry failed items, default is a random selection of every 10 minutes durring 3 am.
#retry_time = 03:16